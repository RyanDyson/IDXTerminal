// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum blockTypes {
  Clock
  TickerGlance
  TickerGraph
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  Dashboard     Dashboard[]
  Post          Post[]
  UserSettings  UserSettings?

  @@map("user")
}

model Dashboard {
  id           String   @id @default(cuid())
  name         String
  account      Account  @relation(fields: [accountId], references: [id])
  accountId    String
  equity       String
  notification Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Tabs   Tabs[]
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Block {
  id        String     @id @default(cuid())
  tab       Tabs       @relation(fields: [tabId], references: [id])
  tabId     String
  type      blockTypes
  equity    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tabs {
  id          String    @id @default(cuid())
  name        String
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id])
  dashboardId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  blocks Block[]
}

model UserSettings {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  theme     String
  language  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String      @id
  accountId             String
  providerId            String
  userId                String
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  email                 String
  Dashboard             Dashboard[]

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
